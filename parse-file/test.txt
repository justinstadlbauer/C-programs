Most serious software development projects use coding guidelines. These guidelines are 
meant to state what the ground rules are for the software to be written: how it should be 
structured and which language features should and should not be used. Curiously, there is 
little consensus on what a good coding standard is. Among the many that have been 
written there are remarkable few patterns to discern, except that each new document 
tends to be longer than the one before it. The result is that most existing guidelines 
contain well over a hundred rules, somet imes with questionable justificat ion. Some rules, 
especially those that try to stipulate the use of white-space in programs, may have been 
introduced by personal preference; others are meant to prevent very specific and unlikely 
types of error from earlier coding efforts within the same organization. Not surprisingly, 
the existing coding guidelines tend to have little effect on what developers actually do 
when they write code. The most dooming aspect of many of the guidelines is that they 
rarely allow for comprehensive tool-based compliance checks. Tool-based checks are 
important, since it is often infeasible to manually review the hundreds of thousands of 
lines of code that are written for larger applications.  

The benefit of existing coding guidelines is therefore often small, even for critical 
applications. A verifiable set of well-chosen coding rules could, however, make critical 
software components more thoroughly analyzable, for properties that go beyond 
compliance with the set of rules itself. To be effective, though, the set of rules has to be 
small, and must be clear enough that it can easily be understood and remembered. The 
rules will have to be specific enough that they can be checked mechanically. To put an 
easy upper-bound on the number of rules for an effective guideline, I will argue that we 
can get significant benefit by restricting to no more than ten rules. Such a small set, of 
course, cannot be all-encompassing, but it can give us a foothold to achieve measurable 
effects on software reliability and verifiability. To support strong checking, the rules are 
somewhat strict â€“ one might even say Draconian. The trade-off, though, should be clear. 
When it really counts, especially in the development of safety critical code, it may be 
worth going the extra mile and living within stricter limits than may be desirable. In 
return, we should be able to demonstrate more convincingly that critical software will 
work as intended. 
